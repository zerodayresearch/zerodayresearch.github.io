---
import { formatDate } from '../utils/dates';

interface Props {
  title: string;
  description?: string;
  publishDate: Date;
  cveId?: string;
  vendor?: string;
  severity?: 'Critical' | 'High' | 'Medium' | 'Low';
  patchStatus?: 'Patched' | 'Unpatched' | 'Partial';
  slug: string;
}

const {
  title,
  description,
  publishDate,
  cveId,
  vendor,
  severity = 'Medium',
  patchStatus = 'Patched',
  slug,
} = Astro.props;

// Get severity color
const getSeverityColor = (severity: string) => {
  switch (severity) {
    case 'Critical':
      return 'bg-cyberred-500';
    case 'High':
      return 'bg-orange-500';
    case 'Medium':
      return 'bg-yellow-500';
    case 'Low':
      return 'bg-cybergreen-500';
    default:
      return 'bg-gray-500';
  }
};

const severityColor = getSeverityColor(severity);
---

<div class="relative overflow-hidden rounded-lg">
  <div class="absolute inset-0 bg-gradient-to-r from-cyberdark-900 to-transparent z-10"></div>
  <div class="absolute inset-0 bg-[url('https://images.pexels.com/photos/5380664/pexels-photo-5380664.jpeg?auto=compress&cs=tinysrgb&w=1600')] bg-cover bg-center opacity-20"></div>
  
  <div class="relative z-20 p-8 md:p-12">
    <div class="max-w-3xl">
      <div class="mb-4 flex flex-wrap gap-2">
        {cveId && (
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-cyberdark-800 text-white">
            {cveId}
          </span>
        )}
        
        {severity && (
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium" style={`background-color: ${getSeverityColor(severity).replace('bg-', '')}`}>
            {severity}
          </span>
        )}
      </div>
      
      <h2 class="text-2xl md:text-3xl font-display text-white mb-3">
        {title}
      </h2>
      
      {description && (
        <p class="text-gray-300 mb-6 max-w-2xl">
          {description}
        </p>
      )}
      
      <div class="flex items-center text-sm text-gray-400 mb-6">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
        <time datetime={publishDate.toISOString()}>
          {formatDate(publishDate)}
        </time>
        
        {vendor && (
          <>
            <span class="mx-2">â€¢</span>
            <span>{vendor}</span>
          </>
        )}
      </div>
      
      <a href={`/advisory/${slug}`} class="inline-flex items-center py-2 px-4 bg-cyberblue-500 hover:bg-cyberblue-400 text-white rounded-md transition-colors">
        Read Advisory
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
        </svg>
      </a>
    </div>
  </div>
</div>